# O mesmo que 2 + 3
`+`(2, 3)
# O mesmo que 2 + 3
`+`(2, 3)
`+`(2, 3)
knitr::opts_chunk$set(echo = FALSE)
objeto_unico <- 2
fileira_objetos <- c(2, 4, 6, 8, 10)
obj_unico <- 2
obj_unico_2
obj_unico <- 2
obj_unico_2 <- 5
fileira_objetos <- c(2, 4, 6, 8, 10)
obj_unico <- 2
obj_unico_2 <- 5
fileira_objetos <- c(2, 4, 6, 8, 10)
soma <- 5 + 5
soma <- 5 + 5
resultado <- 3* fileira_objetos
obj_unico <- 2
obj_unico_2 <- 5
fileira_objetos <- c(2, 4, 6, 8, 10)
soma <- 5 + 5
resultado <- 3* fileira_objetos
resultado
print(soma)
soma <- 5 + 5
resultado <- 3* fileira_objetos
resultado
print(soma)
x <- 5
y <- 3
x + y
x - y
x / y
x * y
8 > 3
x < y
x <- 23
if (x < 0){
x <- -x
}
print(x)
x <- -5
if (x < 0){
x <- -x
}
print(x)
x <- (-5)
if (x < 0){
x <- (-x)
}
print(x)
x <- (5)
if (x < 0){
x <- (-x)
}
print(x)
x <- (5)
if (x < 0){
x <- (-x)
}
print(x)
x < 0
x <- (5)
if (x < 0){
x <- -x
}
x <- (5)
if (x < 0){
y <- -x
}
x <- (5)
if (x < 0){
z <- -x
}
print(z)
x <- 10
if (x < 0){
z <- (-x)
}
print(z)
x <- (5)
if (x < 0){
z <- -x
} else {
print("o valor de x não é negativo")
}
print(z)
x <- (5)
if (x < 0){
z <- -x
} else {
print("o valor de x não é negativo")
}
x <- (5)
if (x < 0){
z <- -x
} else {
print("o valor de x não é negativo")
}
votos <- 800
if (votos > 700){
status <- "eleito"
} else{
status <- "não eleito"
}
print(status)
votos <- 699
if (votos > 700){
status <- "eleito"
} else{
status <- "não eleito"
}
print(status)
partidos <- c("PT", "PSOL", "PCdoB", "PV", "PL", "UNIÃO")
for (i in partidos) {
print(partidos)
}
partidos <- c("PT", "PSOL", "PCdoB", "PV", "PL", "UNIÃO")
for (i in partidos) {
print(i)
}
contador <- 1
while (contador <= 42) {
print(contador)
contador <- contador + 1
}
print(contador)
partidos <- c("PT", "PSOL", "PCdoB", "PV", "PL", "UNIÃO")
for (i in partidos) {
print(i)
i <- tolower(i)
print(i)
}
partidos <- c("pt", "psol", "pv", "pl", "psdb")
for (i in partidos) {
i <- toupper(i)
print(i)
}
partidos <- c("pt", "psol", "pv", "pl", "psdb")
for (sigla in partidos) {
sigla <- toupper(sigla)
print(sigla)
}
file2 <- "https://raw.githubusercontent.com/leobarone/ifch_intro_r/master/data/bf_amostra_nv.csv"
dados <- read.table(file2, header = F, sep = ",")
head(dados)
dados <- read.table(file2, header = T, sep = ",")
head(dados)
# Ponto e virgula
file3 <- "https://raw.githubusercontent.com/leobarone/ifch_intro_r/master/data/bf_amostra_hp.csv"
dados <- read.table(file3, header = T, sep = ";")
file4 <- "https://raw.githubusercontent.com/leobarone/ifch_intro_r/master/data/bf_amostra_ht.csv"
dados <- read.table(file4, header = T, sep = "\t")
dados <- read.table(file2, header = T, sep = ",", nrows = 20)
head(dados)
dados <- read.table(file1, header = T, sep = ",",
colClasses = c("character", "numeric","character", "numeric", "numeric"))
5 + 5
48 - 5
9**2
9^2
10%%2
11%%2
?tolower
(4+6) == (5+10)
(4+6) == (5+5)
7 >= (4 + 3)
4 & 8 > 1
4 | 8 > 5
url <- "https://cdn.tse.jus.br/estatistica/sead/eleicoes/eleicoes2022/buweb/bweb_2t_RJ_311020221535.zip"
votacao_candidato_munzona_2014_AC <- read.table( url,
sep = ";",
fileEncoding="latin1")
votacao_candidato_munzona_2014_AC <- read.table( url,
fileEncoding="latin1")
sqrt(81)
x <- 5
y <- 3
x + y
x - y
x / y
x * y
b <- sqrt(81)
b
b <- sqrt(81)
b
vetor <- c(2, 4, 6, 8, 10) #vetores
vetor2 <- c(2, "2")
class(vetor)
class(vetor2)
c(1,5,7,9)
vetor1 <- c(2, 4, 6, 8, 10) #vetor com números inteiros
vetor2 <- c(2, "2", "dois") # vetor onde o R lê todos os dados como caracteres.
c(1,5,7,9)
c("pt", "psol", "pv", "pl", "psdb")
seq(1,20)
seq(1,12)
seq(12,1)
vetor3 <- c(0.382,0.714,0.926,0.149,0.537,0.893,0.245,0.661,0.428,0.775)
vetor3
mean(vetor3)
sd(vetor3)
getwd()# código comentado
5 + 5
48 - 5
8 * 5
35 / 5
9 ^ 2
9 ** 2
10 %% 2
11 %% 2
8 > 5
6 < 10
(4+6) == (5+5)
(4+6) == (5+10)
(4+6) != (5+5)
7 >= (4 + 3)
4 & 8 > 1
4 | 8 > 5
x <- (-5)
if (x < 0){
z <- (-x)
}
print(z)
x <- 10
if (x < 0){
z <- (-x)
}
print(z)
x <- (5)
if (x < 0){
z <- -x
} else {
print("o valor de x não é negativo")
}
votos <- 800
if (votos > 700){
status <- "eleito"
} else{
status <- "não eleito"
}
print(status)
votos <- 699
if (votos > 700){
status <- "eleito"
} else{
status <- "não eleito"
}
print(status)
partidos <- c("pt", "psol", "pv", "pl", "psdb")
for (sigla in partidos) {
print(sigla)
}
for (sigla in partidos) {
sigla <- toupper(sigla)
print(sigla)
}
obj_unico <- 2
z <- 10
z
soma <- 5 + 5
soma
x <- 5
y <- 3
x + y
x - y
x / y
x * y
b <- sqrt(81)
b
c(1,5,7,9)
c("pt", "psol", "pv", "pl", "psdb")
1:20
seq(12,1)
vetor1 <- c(2, 4, 6, 8, 10) #vetor com números inteiros
vetor2 <- c(2, "2", "dois") # vetor onde o R lê todos os dados como caracteres.
class(vetor1)
class(vetor2)
sum(5,5)
log(8)
sqrt(81)
vetor3 <- c(0.382,0.714,0.926,0.149,0.537,0.893,0.245,0.661,0.428,0.775)
vetor3
mean(vetor3)
sd(vetor3)
?tolower
base_acre_2022 <- import("votacao_secao_2022_AC.csv")
library(rio)
library(tidyverse)
base_acre_2022 <- import("votacao_secao_2022_AC.csv") #import é uma função do pacote rio
View(base_acre_2022)
head(base_acre_2022, n = 10)
ncol(base_acre_2022)
glimpse(base_acre_2022)
ncol(base_acre_2022) # número de colunas
nrow(base_acre_2022) # número de linhas
names(nome das colunas) # nome das colunas
ncol(base_acre_2022) # número de colunas
nrow(base_acre_2022) # número de linhas
names(base_acre_2022) # nome das colunas
base <- base_acre_2022 %>%
select(ANO_ELEICAO, NR_TURNO, DS_CARGO,NM_MUNICIPIO, NM_VOTAVEL, QT_VOTOS)
head(base)
select(base_acre_2022, ANO_ELEICAO, NR_TURNO, DS_CARGO,NM_MUNICIPIO, NM_VOTAVEL, QT_VOTOS)
unique(base$DS_CARGO)
base %>%
filter(QT_VOTOS >= 500)
base %>%
filter(QT_VOTOS >= 10)
base <- base %>%
filter(DS_CARGO == "DEPUTADO FEDERAL")
base %>%
filter(QT_VOTOS >= 10)
base %>%
filter(QT_VOTOS >= 500)
base %>%
filter(QT_VOTOS >= 200)
base %>%
filter(QT_VOTOS >= 100)
base %>%
filter(QT_VOTOS >= 150)
glimpse(base)
glimpse(base_acre_2022)
View(base_acre_2022)
base_acre_2018 <- import("votacao_secao_2018_AC.csv") #import é uma função do pacote rio
names(base_acre_2022) # nome das colunas
glimpse(base_acre_2018)
View(base_acre_2022)
base %>%
group_by(NM_VOTAVEL) %>%
sum(QT_VOTOS)
base %>%
group_by(NM_VOTAVEL) %>%
mutate(voto_candidato = sum(QT_VOTOS))
base %>%
group_by(NM_VOTAVEL) %>%
summarise(voto_candidato = sum(QT_VOTOS))
base %>%
group_by(NM_MUNICIPIO) %>%
summarise(voto_valido_municipio = sum(QT_VOTOS))
hist(base_acre_2018$QT_VOTOS)
base_municipio <- base_municipio %>%
mutate(UF = "Acre", Eleicao = 2018)
base_municipio <- base %>%
group_by(NM_MUNICIPIO) %>%
summarise(voto_valido_municipio = sum(QT_VOTOS))
base_municipio <- base_municipio %>%
mutate(UF = "Acre", Eleicao = 2018)
summary(base_municipio)
x <- (-5)
if (x < 0){
z <- 5 + 5
}
print(z)
x <- 10
if (x < 0){
z <- (-x)
}
print(z)
x <- 10
if (x < 0){
z <- (-x)
}
print(z)
x <- 10
if (x < 0){
y <- (-x)
}
print(y)
x <- 10
if (x < 0){
y <- (-x)
}
print(y)
x <- (-5)
if (x < 0){
z <- (-x)
}
print(z)
x <- 10
if (x < 0){
y <- (-x)
}
print(y)
x <- (-5)
if (x < 0){
z <- (-x)
}
print(z)
x <- 10
if (x < 0){
y <- (-x)
}
print(y)
x <- 1
if (x < 0){
y <- (-x)
}
print(y)
x <- 1
if (x < 0){
y <- (-x)
}
print(y)
x <- 7889
if (x < 0){
y <- (-x)
}
print(y)
x <- (-5)
if (x < 0){
z <- (-x)
}
print(z)
x <- 5
if (x < 0){
y <- (-x)
}
print(y)
x <- 5
if (x < 0){
y <- (-x)
}
print(y)
x <- (5)
if (x < 0){
y <- -x
print(y)
} else {
print("o valor de x não é negativo")
}
for (sigla in partidos) {
sigla <- toupper(sigla)
print(sigla)
}
partidos <- c("pt", "psol", "pv", "pl", "psdb")
for (sigla in partidos) {
print(sigla)
}
for (sigla in partidos) {
sigla <- toupper(sigla)
print(sigla)
}
library(tidyverse)
head(base)
head(base)
